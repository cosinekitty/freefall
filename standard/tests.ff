// tests.ff - Unit tests for Freefall interpreter.

var a, b, c, d: complex;
var x, y, z: real distance;
var u, v, w: real;

// Verify naive power simplification rule.
assertf("a = (-1)^K_1*b", sqrt(a^2=b^2));

// Simplifier and identity tests.
asserti(0, simp(c-c));
asserti(x+y, y+x);
asserti(x*y, y*x);
asserti(x*(x+y) + z*mile*c, c*z*mile + (y+x)*x);
asserti(eval(12*inch), eval(foot));
asserti(deriv(exp(a*a),a), 2*a*exp(a^2));
asserti(deriv(exp(a^2),a), 2*a*exp(a^2));
asserti(diff(ln(a),a), @a/a);
asserti(deriv(ln(exp(v)),v), 1);
asserti(simp(ln(exp(a))), ln(exp(a)));
asserti(simp(ln(exp(v))), v);
asserti(simp(-a*-a*-b*-a),a^3*b);
asserti(simp((x+y+z)^0), 1);
asserti(simp((x+y+z)^1), x+y+z);
asserti(simp((x+y)-y), x);
asserti(simp((3+4)^2), 49);
asserti(simp(pow(-3,7)), -2187);
asserti(deriv(asin(a) + acos(a), a), 0);
asserti(deriv(asin(a), a), deriv(-acos(a), a));
asserti(simp(cos(v)^2 + sin(v)^2), 1);
asserti(simp(w + sin(v)^2 + cos(v)^2), w+1);
asserti(simp(sin(v)^2 + w + cos(v)^2), w+1);
asserti(simp(sin(v)^2 + cos(v)^2 + w), w+1);
asserti(simp(cos(v+3)^2 + 17 + sin(3+v)*sin(1+v+2)), 18);
asserti(simp(cos(v+3)^2 + w + sin(3+v)*sin(1+v+2)), 1+w);
asserti(simp(w*cos(v)^2 + sin(v)^2*w), w);
asserti(simp(w*cos(u)^2*v + v*sin(u)^2*w), w*v);
asserti(simp(cos(w)^2*cos(u)^2 + cos(w)^2*sin(u)^2), cos(w)^2);
asserti(simp(v*cos(w)^2*cos(u)^2 + v*cos(w)^2*sin(u)^2), v*cos(w)^2);
asserti(simp(v*cos(w)^2*cos(u)^2 + sin(u)^2*cos(w)^2*v), v*cos(w)^2);
asserti(simp(2*cos(w)^2*cos(u)^2 + 2*cos(w)^2*sin(u)^2), 2*cos(w)^2);
asserti(simp(17 + 2*cos(w)^2*cos(u)^2 - 3 + 2*cos(w)^2*sin(u)^2 - 4), 10 + 2*cos(w)^2);

// Expression formatter tests.
assertf("123", simp(122+1));
assertf("3+4", sum(3,4));
assertf("3+4", 3+4);
assertf("3-4", sum(3,-4));
assertf("3-4", 3-4);
assertf("(a+b)*(c-d)/(x+y)", (a+b)*(c-d)/(x+y));
assertf("3/4", 3/4);
assertf("sqrt(a*b)", sqrt(a*b));
assertf("sqrt(a*b)", pow(prod(a,b),1/2));

// Numeric evaluation tests.
assertf("16.0", eval(2.0^4.0));
assertf("0.0625", eval(2.0^(-4.0)));
assertf("1267650600228229401496703205376", eval(2^100));
assertf("1.26765060022823e+30", eval(2.0^100));

// Factoring tests.
asserti(factor(a^2 + a^3), a^2*(1+a));
asserti(factor(3+3*a), 3*(1+a));
asserti(factor(x/2+y/2),(x+y)/2);



