    module ::= { statement }
    
    statement ::=  assertf | concept | decomp | unit | assignment | 
                   vardecl | forget | probe | save | ";"

    save ::= "save" str ";"                   
    assertf ::= "assertf" "(" str "," expr ")" ";"
    concept ::= "concept" ident "=" expr ";"
    decomp ::= "decomp" [expr] ";"
    unit ::= "unit" ident "=" expr ";"
    assignment ::= [ ident ":=" ] expr ";"    
    vardecl ::= "var" ident { "," ident } ":" type ";"
    type ::= typename [expr] | expr     // the 'expr' are for concept expressions, e.g. distance/time
    forget ::= "forget" idspec ";"      // deletes named expression(s) or all numbered expressions
    probe ::= "probe" expr ";"          // reports ancillary information about an expression
    idspec ::= "*" | ident { "," ident }
    typename ::= "complex" | "real" | "rational" | "integer" [intrange]
    intrange ::= "[" [numexpr] "," [numexpr] "]"       // numexpr(s) must evaluate to integers
 4  expr ::= numexpr [relop numexpr]
    relop ::= "=" | "!=" | "<" | ">" | "<=" | ">="
    numexpr ::= mulexpr { addop mulexpr }
 5  addop ::= "+" | "-"
    mulexpr ::= powexpr { mulop powexpr }
 6  mulop ::= "*" | "/"
 7  powexpr ::= "-" powexpr | "+" powexpr | atom [ "^" powexpr ]
 8  atom ::= "@"{"@"} ident | eref | ident [ "(" arglist ")" ] | numeric | "(" expr ")"
    arglist ::= expr { "," expr }
 9  numeric ::= /[0-9]+(\.[0-9]*)?([eE][\+\-]?[0-9]+)?i?/
 9  ident ::= /[A-Za-z_][A-Za-z_0-9]*/
 9  eref ::= /#[0-9]*/
    str ::= /"[^"]*"/

